name: Build, Test, Run Security Tools
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  main_scan:
    runs-on: ubuntu-latest
    env:
      PROJECT_KEY: default
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: |
          files=$(find infrastructure -type f -name Dockerfile | sed 's|/Dockerfile||' | jq -R . | jq -s '{service: .}')
          echo "matrix=$(echo $files)" >> $GITHUB_OUTPUT

      - name: Install Orca CLI
        run: curl -sfL 'https://raw.githubusercontent.com/orcasecurity/orca-cli/main/install.sh' | bash -s
  
      - name: Run Orca iac Scan
        run: orca-cli --project-key ${{ env.PROJECT_KEY }} --api-token ${{ secrets.ORCA_TOKEN }} iac scan .

      - name: Run Orca fs Scan
        run: orca-cli --project-key ${{ env.PROJECT_KEY }} --api-token ${{ secrets.ORCA_TOKEN }} fs scan .

      - name: Run Orca sast Scan
        run: orca-cli --project-key ${{ env.PROJECT_KEY }} --api-token ${{ secrets.ORCA_TOKEN }} sast scan .

      - name: Run Aikido Scan
        uses: AikidoSec/github-actions-workflow@v1.0.13
        with:
          secret-key: ${{ secrets.AIKIDO_CLIENT_API_KEY }}
          fail-on-timeout: true
          fail-on-dependency-scan: true
          fail-on-sast-scan: true
          fail-on-iac-scan: true
          minimum-severity: 'HIGH'
          timeout-seconds: 180
          post-scan-status-comment: 'off'
          post-sast-review-comments: 'off'

  image_scan:
    needs: main_scan
    runs-on: ubuntu-latest
    env:
      PROJECT_KEY: default
    strategy:
      matrix: ${{ fromJSON(needs.main_scan.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Build Dockerfile
        run: |
          docker build -t myapp-${{ matrix.service }} ${{ matrix.service }}

      - name: Install Orca CLI
        run: curl -sfL 'https://raw.githubusercontent.com/orcasecurity/orca-cli/main/install.sh' | bash -s

      - name: Run Orca Image Scan
        run: orca-cli --project-key ${{ env.PROJECT_KEY }} --dev --api-token ${{ secrets.ORCA_TOKEN }} image scan myapp-${{ matrix.service }}

      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5
        with:
          image-ref: myapp-${{ matrix.service }}
          format: table
          exit-code: 1
          severity: CRITICAL
